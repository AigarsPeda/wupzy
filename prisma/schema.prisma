// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
}

// Necessary for Next auth
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  id                String  @id @default(cuid())
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  userId       String
  expires      DateTime
  sessionToken String   @unique
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  name                 String?
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  tournament           Tournament[]
  tournamentSignupLink TournamentSignupLink[]
  email                String?                @unique
  stripeCustomerId     String?                @unique
  credits              Int                    @default(100)
  id                   String                 @id @default(cuid())
}

model VerificationToken {
  identifier String
  expires    DateTime
  token      String   @unique

  @@unique([identifier, token])
}

enum TournamentType {
  king
  teams
}

enum TournamentKind {
  FREE
  PRO
  CUSTOM
}

model Tournament {
  sets                 Int
  userId               String
  name                 String
  teams                Team[]
  games                Game[]
  players              Player[]
  shareLink            String?               @unique
  playoffGame          PlayoffGame[]
  tournamentSignupLink TournamentSignupLink?
  updatedAt            DateTime              @updatedAt
  rounds               Int                   @default(1)
  type                 TournamentType        @default(king)
  kind                 TournamentKind        @default(FREE)
  isPlayoffs           Boolean               @default(false)
  createdAt            DateTime              @default(now())
  isStarted            Boolean               @default(false)
  id                   String                @id @default(cuid())
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TournamentSignupLink {
  userId       String
  teams        Team[]
  name         String
  description  String
  players      Player[]
  slug         String         @unique
  tournamentId String?        @unique
  updatedAt    DateTime       @updatedAt
  isActive     Boolean        @default(true)
  type         TournamentType @default(king)
  createdAt    DateTime       @default(now())
  id           String         @id @default(cuid())
  tournament   Tournament?    @relation(fields: [tournamentId], references: [id])
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  tournamentId         String?
  name                 String?
  tournamentSignupLink TournamentSignupLink[]
  points               Int                    @default(0)
  setsWon              Int                    @default(0)
  gamesWon             Int                    @default(0)
  updatedAt            DateTime               @updatedAt
  group                String                 @default("A")
  createdAt            DateTime               @default(now())
  id                   String                 @id @default(cuid())
  players              Player[]               @relation("TeamPlayers")
  teamOne              Game[]                 @relation("teamOne")
  teamTwo              Game[]                 @relation("teamTwo")
  winnerTeam           Game[]                 @relation("winnerTeam")
  playoffTeam          PlayoffGame[]          @relation("playoffTeamWinner")
  teamOnePlayoffGame   PlayoffGame[]          @relation("teamOnePlayoffGame")
  teamTwoPlayoffGame   PlayoffGame[]          @relation("teamTwoPlayoffGame")
  tournament           Tournament?            @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
}

model Player {
  group                String
  name                 String
  tournamentId         String?
  email                String?
  phone                String?
  tournamentSignupLink TournamentSignupLink[]
  updatedAt            DateTime               @updatedAt
  points               Int                    @default(0)
  setsWon              Int                    @default(0)
  gamesWon             Int                    @default(0)
  createdAt            DateTime               @default(now())
  id                   String                 @id @default(cuid())
  teams                Team[]                 @relation("TeamPlayers")
  tournament           Tournament?            @relation(fields: [tournamentId], references: [id])
}

model Game {
  order           Int
  group           String
  teamOneId       String
  teamTwoId       String
  tournamentId    String
  winnerId        String?
  updatedAt       DateTime   @updatedAt
  teamOneSetScore Int        @default(0)
  teamTwoSetScore Int        @default(0)
  round           Int        @default(1) // How many times the teams have played each other
  gameSets        Json       @default("{}")
  createdAt       DateTime   @default(now())
  id              String     @id @default(cuid())
  tournament      Tournament @relation(fields: [tournamentId], references: [id])
  teamOne         Team       @relation("teamOne", fields: [teamOneId], references: [id])
  teamTwo         Team       @relation("teamTwo", fields: [teamTwoId], references: [id])
  winnerTeamId    Team?      @relation("winnerTeam", fields: [winnerId], references: [id])
}

model PlayoffGame {
  teamOneId         String?
  teamTwoId         String?
  winnerId          String?
  tournamentId      String
  match             Int
  round             Int
  updatedAt         DateTime   @updatedAt
  teamOneSetScore   Int        @default(0)
  teamTwoSetScore   Int        @default(0)
  gameSets          Json       @default("{}")
  createdAt         DateTime   @default(now())
  id                String     @id @default(cuid())
  tournament        Tournament @relation(fields: [tournamentId], references: [id])
  playoffTeamWinner Team?      @relation("playoffTeamWinner", fields: [winnerId], references: [id])
  teamOne           Team?      @relation("teamOnePlayoffGame", fields: [teamOneId], references: [id])
  teamTwo           Team?      @relation("teamTwoPlayoffGame", fields: [teamTwoId], references: [id])
}

model Feedback {
  email     String
  name      String
  message   String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
}
